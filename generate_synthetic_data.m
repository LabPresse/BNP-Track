function [w_cnt, x_bnd, y_bnd, dt_stp, dt_exp, units, TEMP, seed] ...
        = generate_synthetic_data(N, M)

    seed = rng;

    %% set up

    % units
    units.time = 's';
    units.length = '\mum';
    units.image = 'ADU';

    % time
    dt_stp = 0.033; % [time] time per frame
    dt_exp = dt_stp - 0.003; % [time] exposure time

    % space
    x_bnd = (0:15) * 0.133; % [length] pixel boundaries in x-coord (no need be equidistant)
    y_bnd = (0:23) * 0.133; % [length] pixel boundaries in y-coord (no need be equidistant)

    % motion
    D = 0.05; % [length]^2/[time]

    x0_mu = 0.5 * (x_bnd(1) + x_bnd(end)); % [length]
    y0_mu = 0.5 * (y_bnd(1) + y_bnd(end)); % [length]
    z0_mu = 0.0; % [length]

    x0_sg = 5 * 0.10; % [length]
    y0_sg = 7 * 0.10; % [length]
    z0_sg = 2 * 0.10; % [length]

    % optics
    NA = 1.45; % numerical aperture
    n_RI = 1.515; % refractive index
    lambda = 0.665; % emission wavelength in um

    PSF_params = get_PSF_params(NA, n_RI, lambda);

    % [h,F] = generate_synthetic_emission_rates(dt_exp,(x_bnd(end)-x_bnd(1))/(length(x_bnd)-1),...
    %                                                  (y_bnd(end)-y_bnd(1))/(length(y_bnd)-1),PSF_params);
    h = 1e+4;
    F = 1e+5;

    % camera read-out
    gain = 0.3; % [image/photon]
    f = 2; % excess noise factor

    %% generate dynamics

    % discretize time
    tn_bnd = dt_stp * (0:N);

    dt = dt_exp / 1000;
    tk = (tn_bnd(1):dt:tn_bnd(end) + dt)';
    K = length(tk);

    [xmk, ymk, zmk] = generate_synthetic_motion_free( ...
        dt, ...
        K, ...
        M, ...
        D, ...
        x0_mu, ...
        x0_sg, ...
        y0_mu, ...
        y0_sg, ...
        z0_mu, ...
        z0_sg, ...
        units, ...
        1, ...
        tk ...
    );

    %% generate images
    u_cnt = generate_synthetic_images( ...
        N, ...
        M, ...
        x_bnd, ...
        y_bnd, ...
        dt_exp, ...
        PSF_params, ...
        F, ...
        h, ...
        dt, ...
        tk, ...
        xmk, ...
        ymk, ...
        zmk, ...
        units, ...
        2, ...
        dt_stp, ...
        tn_bnd ...
    );

    %% generate measurments
    w_cnt = generate_synthetic_measurments( ...
        u_cnt, ...
        gain, ...
        f, ...
        units, ...
        3, ...
        x_bnd, ...
        y_bnd ...
    );

    %%
    TEMP.PSF_params = PSF_params;
    TEMP.f = f;
    TEMP.ground.tk = tk;
    % TEMP.ground.Sk = smk;
    TEMP.ground.Xk = xmk;
    TEMP.ground.Yk = ymk;
    TEMP.ground.Zk = zmk;
    TEMP.ground.F = F;
    TEMP.ground.h = h;
    TEMP.ground.G = gain;
    TEMP.ground.D = D;
    TEMP.ground.M = M;

end
